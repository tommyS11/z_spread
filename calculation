import numpy as np
from scipy.optimize import minimize

def bond_value(z, spot_rates, cpn_rate, years, fv):
    """ Calculate the present value of the bond for a given z-spread. """
    cpn = cpn_rate * fv  # annual coupon payment
    cash_flows = np.array([cpn] * (years - 1) + [fv + cpn])  # Coupons for (N-1) years, last includes face value
    discount_rates = np.array(spot_rates) + z  # adjust spot rates by z-spread
    discount_factors = (1 + discount_rates) ** np.arange(1, years + 1)
    pv = np.sum(cash_flows / discount_factors)
    return pv

def find_z_spread(spot_rates, cpn_rate, years, fv, market_value):
    """ Find the z-spread which prices the bond to its market value. """
    objective = lambda z: (bond_value(z, spot_rates, cpn_rate, years, fv) - market_value) ** 2
    result = minimize(objective, x0=[0.01], method='BFGS')  # Initial guess of z-spread and optimization method
    return result.x[0]

# Define the bond parameters
spot_rates = [0.05, 0.06, 0.065, 0.07]
cpn_rate = 0.12  # 12%
years = 4
fv = 1000
market_value = 975

# Calculate the Z-spread
z_spread = find_z_spread(spot_rates, cpn_rate, years, fv, market_value)
z_spread

